iid_eigenvalues <- apply(iid_wish, 3, function(x){eigen(x)$values})
iid_eigenvalues
min(iid_eigenvalues)
max(iid_eigenvalues)
hist(iid_eigenvalues)
load("~/DATA/masterarbeit/simulations_cleaned/simulations_HMC_eigen_BO_constraints/simulation_results/results_final_hmc_eigendecomp_big_M10000_10_epsilon0.002_L_3.Rda")
eigen_eigen <- hmc_final_simulation[[1]]
hist(eigen_eigen[,2001:10000])
plot(hmc_final_simulation[[8]], type="l")
sum(hmc_final_simulation[[7]])
iid_wish <- rWishart(100000,200,diag(1,10))
iid_eigenvalues <- apply(iid_wish, 3, function(x){eigen(x)$values})
eigen_eigen[50,1:10000]
eigen_eigen[10,1:10000]
eigen_eigen[1,1:10000]
max(eigen_eigen[,1:10000])
min(eigen_eigen[,1:10000])
hist(eigen_eigen[,1:10000])
hist(eigen_eigen[,2001:10000])
hist(eigen_eigen[,eigen_eigen>1])
eigen_eigen>1
hist(eigen_eigen[eigen_eigen>1])
hist(eigen_eigen[eigen_eigen<1])
iid_eigenvalues
min(iid_eigenvalues)
load("~/DATA/masterarbeit/simulations_cleaned/simulations_HMC_eigen_BO/simulation_results/results_final_hmc_eigendecomp_big_M10000_2_epsilon0.604_L_19.Rda")
hmc_final_simulation_eigen <- hmc_final_simulation
eigenvalues <- as.data.frame(as.vector(hmc_final_simulation_eigen[[1]][,2001:10000]))
names(eigenvalues) <- "eigenvalues"
eigenvalues$Type <- "HMC"
load("~/DATA/masterarbeit/simulations_cleaned/simulations_HMC_cholesky_BO/simulation_results/run_final_hmc_big_M10000_2_epsilon0.817_L_6.Rda")
hmc_final_simulation_cholesky <- hmc_final_simulation
choleksy_eigenvalues <- apply(hmc_final_simulation_cholesky[[2]][,,2001:10000], 3, function(x){eigen(x)$values})
choleksy_eigenvalues <- as.data.frame(as.vector(choleksy_eigenvalues))
names(choleksy_eigenvalues) <- "eigenvalues"
choleksy_eigenvalues$Type <- "Cholesky"
compare_wishart <- rWishart(8000, 20, matrix(c(1,0,0,1),2,2))
iid_eigenvalues <- apply(compare_wishart, 3, function(x){eigen(x)$values})
iid_eigenvalues <- as.data.frame(as.vector(iid_eigenvalues))
names(iid_eigenvalues) <- "eigenvalues"
iid_eigenvalues$Type <- "iid"
eigenvalues_all <- rbind(eigenvalues, iid_eigenvalues, choleksy_eigenvalues)
m <- ggplot(eigenvalues_all,aes(x=eigenvalues, group=Type, color=Type, linetype=Type)) + geom_line(stat="density", size = 1.5)  + theme_bw()   +scale_colour_manual(values = c("black", "grey", "black")) +scale_linetype_manual(values=c(1,2,4))
library(ggplot2)
m <- ggplot(eigenvalues_all,aes(x=eigenvalues, group=Type, color=Type, linetype=Type)) + geom_line(stat="density", size = 1.5)  + theme_bw()   +scale_colour_manual(values = c("black", "grey", "black")) +scale_linetype_manual(values=c(1,2,4))
m +labs(title = "Density of the eigenvalues for a \ntwo dimensional Wishart distribution", x="Eigenvalues")
ks.test(eigenvalues$eigenvalues, iid_eigenvalues$eigenvalues)
ks.test(eigenvalues$eigenvalues, iid_eigenvalues$eigenvalues, exact=T)
ks.test(choleksy_eigenvalues$eigenvalues, iid_eigenvalues$eigenvalues, exact=T)
ks.test(choleksy_eigenvalues$eigenvalues, eigenvalues$eigenvalues, exact=T)
ks.test(eigenvalues$eigenvalues, iid_eigenvalues$eigenvalues, exact=T)
hist(eigen_eigen[eigen_eigen<1])
system.time(1+1, gcFirst = TRUE)
setwd("~/DATA/masterarbeit/simulations_cleaned/functions")
source(file= "function_MASTER.R", local=T)
library(Matrix)
v = 20 # degrees of freedom
s = 2
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 50
epsilon = 0.5
L <- 10
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
a
a
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda, intervall_ev=NULL))
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
b
?system.time
a[1]
a[3]
c <- system.time(rWishart(big_M,v,Sigma))
c
big_M <- 100
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
a
b
c
v = 200 # degrees of freedom
c <- system.time(rWishart(big_M,v,Sigma))
c
v = 2000 # degrees of freedom
c <- system.time(rWishart(big_M,v,Sigma))
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
v = 200 # degrees of freedom
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
v = 100 # degrees of freedom
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
a
b
s = 10
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 100
epsilon = 0.5
L <- 10
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
L <- 1
big_M <- 1
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
v = 100 # degrees of freedom
s = 10
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
v = 20 # degrees of freedom
s = 10
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
s = 5
v = 20 # degrees of freedom
f.compute_computation time <- function(v,s){
out_file <- NA
for(2:s){
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
out_file <- rbind(out_file, c(a[3], b[3],c[3]))
}
return(out_file)
}
f.compute_computation(v,s)
f.compute_computation_time <- function(v,s){
out_file <- NA
for(2:s){
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
out_file <- rbind(out_file, c(a[3], b[3],c[3]))
}
return(out_file)
}
f.compute_computation_time <- function(v,s){
out_file <- NA
for(2:s){
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
out_file <- rbind(out_file, c(a[3], b[3],c[3]))
}
return(out_file)
}
v = 20 # degrees of freedom
s = 5
out_file <- NA
for(2:s){
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
out_file <- rbind(out_file, c(a[3], b[3],c[3]))
}
out_file
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
s.s = 5
out_file <- NA
for(s in 2:s.s){
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
out_file <- rbind(out_file, c(a[3], b[3],c[3]))
}
out_file
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
s
f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
f.HMC_simulation(big_M, epsilon, L, v, 2, Sigma, Sigma_inv, l)
f.HMC_simulation(big_M, epsilon, L, v, 4, Sigma, Sigma_inv, l)
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
setwd("~/DATA/masterarbeit/simulations_cleaned/functions")
source(file= "function_MASTER.R", local=T)
library(Matrix)
v = 20 # degrees of freedom
s.s = 5
out_file <- NA
for(s in 2:s.s){
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
out_file <- rbind(out_file, c(a[3], b[3],c[3]))
}
out_file
system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
lambda_start
Sigma_inv
Sigma
l
setwd("~/DATA/masterarbeit/simulations_cleaned/functions")
source(file= "function_MASTER.R", local=T)
library(Matrix)
v = 20 # degrees of freedom
s.s = 5
out_file <- NA
s = 2
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 1
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL)
big_M
big_M <- 2
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
a
big_M <- 10
v = 20 # degrees of freedom
s.s = 5
out_file <- NA
for(s in 2:s.s){
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 10
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
out_file <- rbind(out_file, c(a[3], b[3],c[3]))
}
out_file
s.s = 10
out_file <- NA
for(s in 2:s.s){
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 10
epsilon = 0.5
L <- 1
############################################
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
#f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l)
# Choleksy
a <- system.time(f.HMC_simulation(big_M, epsilon, L, v, s, Sigma, Sigma_inv, l), gcFirst = TRUE)
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
out_file <- rbind(out_file, c(a[3], b[3],c[3]))
}
out_file
v <- 40
s <- 20
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
v <- 30
s <- 20
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
v <- 100
s <- 20
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
lambda
intervall_ev
epsilon
L
L <- 5
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
v <- 100
s <- 20
L <- 5
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
lambda
q
v <- 20
s <- 15
L <- 5
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
v <- 20
s <- 15
L <- 5
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 10
epsilon = 0.5
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
b
v <- 100
s <- 20
L <- 1
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 10
epsilon = 0.5
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
b
c
v <- 1000
s <- 200
L <- 1
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 10
epsilon = 0.5
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
v <- 200
s <- 100
L <- 1
diagonal <- diag(1,s,s)
low_tri <- lower.tri(matrix(0,s,s))*0
up_tri <- upper.tri(matrix(0,s,s))*0
Sigma = diagonal+low_tri+up_tri
Sigma_inv = solve(Sigma) #matrix(c(1,0,0,1),2,2)
l = t(chol(Sigma))
big_M <- 10
epsilon = 0.5
test_mat <- as.matrix(rWishart(1, v, Sigma)[,,1])
lambda_start <- eigen(test_mat, symmetric=F)$values
b <- system.time(f.HMC_simulation_eigenvalues(big_M, epsilon, L, v, s, lambda_start, intervall_ev=NULL))
c <- system.time(rWishart(big_M,v,Sigma))
b
c
